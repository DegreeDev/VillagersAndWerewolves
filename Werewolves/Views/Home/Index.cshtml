@{
	ViewBag.Title = "Villagers and Werewolves";
}

<div class="row-fluid" data-bind="if: isJoined">
	<div class="col-md-9">
		<div class="page-header">
			
				<h1>Welcome <small data-bind="text: name"></small><img class="" data-bind="	attr: { src: gravatar }" alt="Profile" /></h1>
				
				<span class="label label-primary" data-bind="text: transport"></span>
				<span class="label" data-bind="text: connectionState, css: connectionStateClass"></span>
				<button class="btn" data-bind="visible: !isStarted() && isAdmin, click: startGame">Start Game</button>
		</div>
	</div>
	<div class="col-md-3">
		<div class="alert alert-danger alert-dismissable" data-bind="visible: showError">
			<button type="button" class="close" data-dismiss="alert" aria-hidden="true" data-bind="click: hideError">&times;</button>
			<div><span data-bind="text: error"></span></div>
		</div>
	</div>
</div>
<div class="clear"></div>
@*<div class="row-fluid" data-bind="if: isJoined">
	<div class="col-md-12">
		<div class="panel-group" id="accordion">
			<div class="panel panel-default">
				<div class="panel-heading">
					<h4 class="panel-title" data-toggle="collapse" data-parent="#accordion" href="#collapseOne">Rules
					</h4>
				</div>
				<div id="collapseOne" class="panel-collapse collapse in">
					<div class="panel-body">
						<ol>
							<li>There are 2 Werewolves</li>
							<li>Vote for a player</li>
							<li>Repeat until there are two players left</li>
							<li>Werewolves have their own chat window to talk to each other</li>
							<li>If there are any Werewolves left at the end, Werewolves win</li>
						</ol>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>*@
<div class="row-fluid" data-bind="if: isJoined">
	<div class="chat-pane col-md-4">
		<div class="panel panel-info">
			<div class="panel-heading">
				<h3 class="panel-title">General Chat</h3>
			</div>
			<div class="panel-body">
				<div class="input-group">
					<input type="text" class="form-control" data-bind="value: generalMessage, enterKey: sendGeneralMessage" />
					<span class="input-group-btn">
						<button class="btn" data-bind="click: sendGeneralMessage">Send</button>
					</span>
				</div>
				<table class="table table-striped table-condensed">
					<tbody data-bind="foreach: generalMessages">
						<tr data-bind="slideVisible: true">
							<td data-bind="html: $data"></td>
						</tr>
					</tbody>
				</table>
			</div>
		</div>
	</div>
	<div data-bind="if: isWerewolf" class="werewolf-chat-pane col-md-4">
		<div class="panel panel-info">
			<div class="panel-heading">
				<h3 class="panel-title">Werewolf Chat</h3>
			</div>
			<div class="panel-body">
				<div class="input-group">
					<input class="form-control" type="text" data-bind="value: werewolfMessage, enterKey: sendWerewolfMessage" />
					<span class="input-group-btn">
						<button class="btn" data-bind="click: sendWerewolfMessage">Send</button>
					</span>
				</div>
				<table class="table table-striped table-condensed">
					<tbody data-bind="foreach: werewolfMessages">
						<tr>
							<td data-bind="html: $data"></td>
						</tr>
					</tbody>
				</table>
			</div>
		</div>
	</div>
	<div class="col-md-4">
		<div class="panel panel-info">
			<div class="panel-heading">
				<h3 class="panel-title">Voting - Select a player...
				</h3>
			</div>
			<div class="panel-body">
				<div class="alert alert-warning" data-bind="visible: !isVoting()">
					Voting is not yet enabled, hold on tight.
				</div>
				<div class="input-group">
					<select class="form-control" data-bind="value: selectedPlayer, options: players, optionsText: 'name', optionsValue: 'id', enable: isVoting "></select>
					<span class="input-group-btn">
						<button class="btn" data-bind="click: castVote, enable: isVoting">Cast Vote</button>
					</span>
				</div>
			</div>
			<div class="panel-footer" data-bind="visible: showProgressBar">
				<div class="progress">
					<div class="progress-bar" role="progressbar" aria-valuenow="60" aria-valuemin="0" aria-valuemax="100" style="width: 60%;" data-bind="attr: { 'aria-valuenow': votingCompletion }, style: { width: votingCompletion() + '%' }">
					</div>
				</div>
			</div>
		</div>
	</div>
</div>
<div class="row-fluid">
	<div class="col-md-12">
		<div class="join-modal modal fade">
			<div class="modal-dialog">
				<div class="modal-content">
					<div class="modal-header">
						<h4 class="modal-title">Welcome to Villagers and Werewoloves!</h4>
					</div>
					<div class="modal-body">
						<div class="">
							<label>What's your name?</label>
							<input type="text" class="form-control name-input" data-bind="value: name" />
							<label>Email:</label>
							<input type="text" class="form-control name-input" data-bind="value: email, enterKey: joinGame" />
						</div>
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-default" data-dismiss="modal" data-bind="click: joinGame">Join Game</button>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

@section Scripts {
	@Scripts.Render("~/bundles/lib")
	<script type="text/javascript" src="~/Scripts/mousetrap.min.js"></script>
	<script type="text/javascript" src="~/signalr/hubs"></script>
	<script type="text/javascript">
		ko.bindingHandlers.enterKey = {
			init: function (el, va, aba, data, context) {
				var wrapper = function (data, event) {
					if (event.keyCode === 13) {
						va().call(this, data, event);
					}
				};
				ko.applyBindingsToNode(el, { event: { keyup: wrapper } }, context);
			}
		};
		ko.bindingHandlers.slideVisible = {
			init: function (el) {
				$(el).slideDown();
			}
		};
		function ViewModel() {
			var self = this;

			//create the hub proxy for "wereWolfHub" -Notice camelCase version of the serers "WereWolfHub"
			//  By default the hub convension is a camelCased version of the server hub name
			//      -This can be overrode with [HubName("VillagersAndWerewolfHub")]
			self.chat = $.connection.wereWolfHub;

			self.transport = ko.observable();
			self.connectionState = ko.observable();
			self.connectionStateClass = ko.observable();
			$.connection.hub.stateChanged(function (state) {
				switch (state.newState) {
					case 0:
						self.connectionState("Connecting");
						self.connectionStateClass("label-info");
						break;
					case 1:
						self.connectionState("Connected");
						self.connectionStateClass("label-success");
						break;
					case 2:
						self.connectionState("Reconnecting");
						self.connectionStateClass("label-warning");
						break;
					case 4:
						self.connectionState("Disconnected");
						self.connectionStateClass("label-danger");
						break;
				}
			});

			self.$joinModal = $(".join-modal");

			//two observable lists to hold the general chat messages and the werewolf specific messages
			self.generalMessages = ko.observableArray();
			self.werewolfMessages = ko.observableArray();

			//two observables to hold the message being send to either chat
			self.werewolfMessage = ko.observable();
			self.generalMessage = ko.observable();

			//a list of the players who are currently in the game
			self.players = ko.observableArray();

			//your name
			self.name = ko.observable("matthew");
			self.email = ko.observable("mslee61@gmail.com");
			self.gravatar = ko.observable();
			self.gravatarSmall = ko.computed(function () {
				return self.gravatar() + "?s=10";
			});
			self.playerId = ko.observable(null);
			self.gameId = ko.observable();

			//some bools to hold random server side stuff for display
			self.isWerewolf = ko.observable(false);
			self.isVoting = ko.observable(false);
			self.isJoined = ko.observable(false);
			self.isStarted = ko.observable(false);
			self.isAdmin = ko.observable(false);

			self.votingCompletion = ko.observable(0);
			self.showProgressBar = ko.computed(function () {
				return self.votingCompletion() > 0;
			});

			self.error = ko.observable();
			self.showError = ko.observable(false);

			//the player you select to lynch
			self.selectedPlayer = ko.observable();

			//a knockout method which calls a server side method
			self.sendWerewolfMessage = function () {
				self.chat.server.wereWolfChat(self.werewolfMessage());
				self.werewolfMessage("");
			};

			self.sendGeneralMessage = function () {
				self.chat.server.generalChat(self.generalMessage());
				self.generalMessage("");
			};
			self.castVote = function () {
				self.chat.server.castVote(self.selectedPlayer());
				self.selectedPlayer("");
				self.isVoting(false);
			};

			self.startGame = function () {
				self.chat.server.startGame();
				self.isStarted(true);
			};

			self.joinGame = function () {
				self.$joinModal.modal("hide");
				self.$joinModal.hide();
				self.chat.server.joinGame(self.name(), self.email(), self.playerId()).done(function (result) {
					self.playerId(result.playerId);
					self.gameId(result.gameId);
					self.gravatar(result.gravatar);
				});
				self.isJoined(true);
			};

			self.hideError = function () {
				self.showError(false);
				self.error("");
			};

			self.name.subscribe(function (newValue) {
				self.chat.server.setName(newValue);
			});


			/*
                Methods that the server can call on the client are defined on the 'chat.client' object
            */
			self.chat.client.initiateVote = function () {
				self.generalMessages.unshift("Voting started!");

				self.isVoting(true);
				self.chat.server.getCurrentPlayers();
			};
			self.chat.client.updateVoting = function (percentage) {
				self.votingCompletion(parseFloat(percentage));
			};
			self.chat.client.leaveGame = function () {
				self.isJoined(false);
			};
			self.chat.client.message = function (name, message, gravatar) {
				self.generalMessages.unshift("<img src='" + gravatar + "'/>"+ "<b>" + name + ": </b>" + message);
			};
			self.chat.client.werewolfMessage = function (name, message) {
				self.werewolfMessages.unshift(gravatar + "<b>" + name + ": </b>" + message);
			};
			self.chat.client.error = function (message) {
				self.error(message);
				self.showError(true);
			};
			self.chat.client.processPlayers = function (players) {
				self.players.removeAll();
				ko.utils.arrayPushAll(self.players, players);
			};
			self.chat.client.setWerewolf = function () {
				self.isWerewolf(true);
			};

			//A function to call once the knockout object is made
			self.startHub = function () {
				$.connection.hub.start().done(function () {

					self.transport($.connection.hub.transport.name);


					self.$joinModal.modal();
					$(".name-input").focus();
				});
			};

			//mousetrap bindings
			Mousetrap.bind('ctrl+.', function () {
				self.isAdmin(true);
			});
		}
		$(function () {
			$(document).on("create.vandw", function () {
				window.vm = new ViewModel();
				ko.applyBindings(window.vm);
				window.vm.startHub();
			}).trigger("create.vandw");
		});
	</script>
}
