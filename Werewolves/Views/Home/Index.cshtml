<script type="text/javascript" src="~/Scripts/jquery-2.0.3.js"></script>
<script type="text/javascript" src="~/Scripts/jquery.signalR-2.0.0.js"></script>
<script type="text/javascript" src="~/signalr/hubs"></script>
<script type="text/javascript" src="~/Scripts/knockout-2.3.0.js"></script>
<link href="~/Content/bootstrap/bootstrap.css" rel="stylesheet" />
<div class="row" data-bind="ifnot: isJoined">
<label>
    Name:
    <input type="text" data-bind="value: name" /></label>
<button class="btn" data-bind="click: joinGame">Join Game</button>
</div>
<div class="row" data-bind="if: isJoined">
    <h2>Welcome, <span data-bind="text: name"></span></h2>
</div>
<div class="row">
    <div class="chat-pane col-md-4 bordered">
        <h3>General Chat</h3>
        <div data-bind="foreach: generalMessages">
            <p>
                <span data-bind="text: $data"></span>
            </p>
        </div>
        <input type="text" data-bind="value: generalMessage" />
        <button class="btn" data-bind="click: sendGeneralMessage">Send</button>
    </div>
    <div data-bind="visible: isWerewolf" class="werewolf-chat-pane col-md-4  bordered">
        <h3>Werewolf Chat</h3>
        <div data-bind="foreach: werewolfMessages">
            <p><span data-bind="text: $data"></span></p>
        </div>
        <input type="text" data-bind="value: werewolfMessage" />
        <button class="btn" data-bind="click: sendWerewolfMessage">Send</button>
    </div>
<div data-bind="visible: isVoting" class="col-md-4">
    <p class="col-md-12">
        Pick your player: 
        <select data-bind="value: selectedPlayer, options: players, optionsText: 'name', optionsValue: 'id' "></select>
    </p>
    <button class="btn" data-bind="click: castVote">Cast Vote</button>
</div>
</div>




<button class="btn" data-bind="visible: !isStarted() && isAdmin, click: startGame">Start Game</button>
<script>
   
    function ViewModel() {
        var self = this;


        self.chat = $.connection.wereWolfHub;
        self.generalMessages = ko.observableArray();
        self.werewolfMessages = ko.observableArray();

        self.werewolfMessage = ko.observable();
        self.generalMessage = ko.observable();

        self.players = ko.observableArray();

        self.name = ko.observable();
        self.isWerewolf = ko.observable(false);
        self.isVoting = ko.observable(false);
        self.isJoined = ko.observable(false);
        self.isStarted = ko.observable(false);

        self.isAdmin = ko.computed(function () {
            return self.name() === "Matthew";
        });

        self.selectedPlayer = ko.observable();

        self.sendWerewolfMessage = function () {
            self.chat.server.wereWolfChat(self.werewolfMessage());
            self.werewolfMessage("");
        };

        self.sendGeneralMessage = function () {
            self.chat.server.generalChat(self.generalMessage());
            self.generalMessage("");
        };
        self.castVote = function () {
            self.chat.server.castVote(self.selectedPlayer());
            self.selectedPlayer("");
            self.isVoting(false);
        };


        self.name.subscribe(function (newValue) {
            self.chat.server.setName(newValue);
        });

        self.chat.client.initiateVote = function () {
            self.generalMessages.push("Voting started!");

            self.isVoting(true);
            self.chat.server.getCurrentPlayers();
        };

        self.joinGame = function () {
            console.log("called join Game");
            self.chat.server.joinGame(self.name());
            self.isJoined(true);
            
        };
        self.chat.client.leaveGame = function () {
            self.isJoined(false);
        };
        self.startGame = function () {
            self.chat.server.startGame();
            self.isStarted(true);
        };

        self.chat.client.message = function (message) {
            self.generalMessages.push(message);
        };


        self.chat.client.werewolfMessage = function (message) {
            self.werewolfMessages.push(message);
        };

        self.chat.client.error = function (message) {
            alert(message);
        };

        self.chat.client.processPlayers = function (players) {
            console.log(players);
            self.players.removeAll();

            ko.utils.arrayPushAll(self.players, players);
        };

        self.chat.client.setWerewolf = function () {
            self.isWerewolf(true);
        };

        
        self.startHub = function () {
            $.connection.hub.start().done(function () {
                console.log("hub started");
            });
        };
        

    }
    var vm = new ViewModel();
    ko.applyBindings(vm);
    vm.startHub();
</script>
